Подготовить бизнес сценарий в котором вам нужна распределенная база данных.
Рассмотреть 3 СУБД, выделить их плюсы и минусы, принять решение какая СУБД подойдет
в вашем случае лучше всего и почему.

Бизнес сценарий: Логистическая система.

Большая международная компания нужнается в логистической системе, пользователи которой могут создавать
различные заявки на передвижение грузов по всему миру.
* Система работает в реальном времени - маршруты для грузовых автомобилей и курьеров(агентов) расчитываются исходя из текущего состояния заявок и могут пересчитываться.
* Алгоритмы машинного обучения переодически считывают новые данные и угадывают маршруты для грузовых, легковых и курьеров.
* Маршруты для товарных поездов и поездов расчитываются один раз перед погрузкой.
* Все агенты могут забирать и передавать грузы, меняя состояние грузов.

К системе прилагаются дополнительные требования отказоустойчивости.

Заказчик согласился использовать только следующие три базы данных: PostgreSQL, MongoDB, Redis.

Для достижения высокой отказоустойчивости требуется построить распределенную систему - неисправность на одной машине,
в одном помещении или регионе должна минимально повлиять на актуальность маршрутов.

0)Язык
MongoDB - NoSQL
Redis - NoSQL
PostgreSQL - SQL

1)Поддержка распределенности
MongoDB была построена изначально как распределенная DB.
Redis - из-за своего low latency подхода строилась как не распределенная система, хотя поддержка распределения так же существуеют.
PostgreSQL - построена давно, поэтому не затачивалась как распределенная. Хотя поддержка присутствует.

2)Иерархия
MongoDB - есть одна головная база данных, в которую пишут все. Писать в реплики нельзя, из реплик только читают. Есть поддержка Active-Active
Redis - Active-Active из коробки не поддерживается, но можно прикрутить.
PostgreSQL - Active-Active из коробки не поддерживается, но можно прикрутить.

3)Topology awarness
MongoDB - есть из коробки, знает что находится в одной стойке с другими репликами
PostgreSQL - из коробки нет, но можно добавить
Redis - из коробки нет, но можно добавить

Выбор достаточно сложный - у каждой базы данных есть свои плюсы и минусы.

Так как первоначальной целью у нас была поддержка отказоустойчивости
и нам не нужно было производить много записей и чтений(обновления есть, но задежки допускаются большими), то
Redis здесь точно не подходит. Это нестандартный NOSql подход, и нет поддержки распределенности из коробки.
Active-Active нам тоже особо не пригодится здесь.

PostgreSQL мог бы нам подойти, потому что это проверенное решение, в нем используется знакомый всем SQL, но его минусы
это отсутствие кластеризации из коробки.

Выбор приходтся на MongoDB - это достаточно популярная база данных, что бы найти специалистов для ее поддерки.
Эта база данных может расширятся как вертикально так и горизнтально и кроме того такая база данных
имеет поддержку кластеризации из коробки, что необходимо для обеспечения отказоустойчивости.



